SQL INTRO

-- find all products
SELECT * FROM products;

-- find all products that cost $1400
SELECT * FROM products WHERE Price = 1400;
-- find all products that cost $11.99 or $13.99
SELECT * FROM products WHERE Price = 11.99 OR Price = 13.99;
-- find all products that do NOT cost 11.99 - using NOT
SELECT * FROM products WHERE NOT Price = 11.99;
-- find all products and sort them by price from greatest to least
SELECT * FROM products ORDER BY Price Desc;
-- find all employees who don't have a middle initial
SELECT * FROM employees WHERE MiddleInitial IS NULL;
-- find distinct product prices
SELECT DISTINCT Price FROM products ORDER BY Price;
-- find all employees whose first name starts with the letter ‘j’
SELECT * FROM employees WHERE FirstName Like 'j%';
-- find all Macbooks
SELECT * FROM products WHERE Name LIKE '%mac%book%';
-- find all products that are on sale
SELECT * FROM products WHERE OnSale;
-- find the average price of all products
SELECT AVG(Price) FROM products;
-- find all Geek Squad employees who don't have a middle initial
SELECT * FROM employees WHERE Title = 'Geek Squad' AND MiddleInitial IS NULL;
-- find all products from the products table whose stock level is in the range -- of 500 to 1200. Order by Price from least to greatest. Hint: Use the between keyword
SELECT * FROM products WHERE stockLevel BETWEEN 500 AND 1200 ORDER BY Price;










SQL JOINS

/* joins: select all the computers from the products table:
N p.CategoryID = c.Cusing the products table and the categories table, return the product name and the category name */
SELECT p.NAME AS Product, c.NAME AS Category
FROM products AS p 
INNER JOIN categories AS c
ON p.categoryID = c.CategoryID
WHERE c.Name = "Computers";
/* joins: find all product names, product prices, and products ratings that have a rating of 5 */
SELECT p.Name, p.Price, r.Rating
FROM products AS p
INNER JOIN reviews AS r
ON p.ProductID = r.ProductID
WHERE r.Rating = 5;
/* joins: find the employee with the most total quantity sold.  use the sum() function and group by */
SELECT concat(e.FirstName, " ", e.LastName) AS Employee, SUM(s.Quantity) AS Total
FROM employees AS e
INNER JOIN sales AS s
ON e.EmployeeID = s.EmployeeID
GROUP BY e.EmployeeID
ORDER BY Total DESC
Limit 1;

/* joins: find the name of the department, and the name of the category for Appliances and Games */
SELECT d.NAME AS Department, c.Name AS Category FROM categories AS c
INNER JOIN departments AS d
ON d.DepartmentID = c.DepartmentID
WHERE c.NAME = "Appliances" OR c.NAME = "Games"; 

/* joins: find the product name, total # sold, and total price sold,

 for Eagles: Hotel California --You may need to use SUM() */
SELECT
	p.Name AS Product,
    SUM(s.Quantity) AS TotalQuantity,
    SUM(s.PricePerUnit * s.Quantity) AS TotalValue
FROM
	products AS p
		INNER JOIN
	sales AS s ON p.ProductID = s.ProductID
WHERE p.NAME = 'Eagles: Hotel California';
/* joins: find Product name, reviewer name, rating, and comment on the Visio TV. (only return for the lowest rating!) */
SELECT p.Name AS Product, r.Reviewer, r.Rating, r.Comment
FROM reviews AS r
INNER JOIN products AS p
ON p.ProductID = r.ProductID
WHERE p.Name = "Visio TV"
ORDER BY r.Rating
Limit 1;